# -*- coding: utf-8 -*-
"""UAS12.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dikPpYT5zNSMmDLd2HBKkBImiBljVEJe
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

file_path = '/content/drive/MyDrive/Kebut25/diabetes.csv'

try:
    df = pd.read_csv(file_path, delimiter=';')
    print("‚úÖ Dataset berhasil dibaca dengan delimiter titik koma (;)")
except:
    try:
        df = pd.read_csv(file_path)
        print("‚úÖ Dataset berhasil dibaca dengan delimiter koma (,)")
    except Exception as e:
        print("‚ùå Gagal membaca file:", e)

# Bersihkan nama kolom
df.columns = df.columns.str.strip()

# Hapus kolom tidak penting
df = df.drop(columns=[col for col in df.columns if "Unnamed" in col], errors='ignore')

# Konversi ke numerik (kecuali target)
cols_to_convert = df.columns.drop('Outcome')
df[cols_to_convert] = df[cols_to_convert].apply(pd.to_numeric, errors='coerce')

# Hapus baris dengan target kosong
df = df.dropna(subset=['Outcome'])

# Isi nilai kosong lain dengan median
df = df.fillna(df.median(numeric_only=True))

# Cek data
print("‚úÖ Data siap digunakan. Ukuran:", df.shape)
print(df.head())

df.hist(figsize=(12, 8), bins=20, color='skyblue', edgecolor='black')
plt.suptitle("Distribusi Setiap Fitur", fontsize=16)
plt.tight_layout()
plt.show()

plt.figure(figsize=(10, 8))
sns.heatmap(df.corr(), annot=True, cmap='coolwarm', fmt=".2f")
plt.title("Matriks Korelasi")
plt.show()

df['Outcome'].value_counts().plot.pie(
    autopct='%1.1f%%',
    labels=['Tidak Diabetes', 'Diabetes'],
    colors=['#66b3ff', '#ff9999'],
    startangle=90,
    figsize=(5, 5),
    title='Distribusi Risiko Diabetes'
)
plt.ylabel("")
plt.show()

# Pisahkan fitur dan label
X = df.drop('Outcome', axis=1)
y = df['Outcome']

# Split data
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42
)

# Inisialisasi dan latih model
model = GaussianNB()
model.fit(X_train, y_train)

# Prediksi
y_pred = model.predict(X_test)

# Akurasi
print("üéØ Akurasi Model:", accuracy_score(y_test, y_pred))

# Laporan klasifikasi
print("\nüìä Classification Report:\n", classification_report(y_test, y_pred))

# Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
sns.heatmap(conf_matrix, annot=True, fmt="d", cmap="Blues")
plt.title("Confusion Matrix")
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.show()